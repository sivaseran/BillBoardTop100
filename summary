BillBoardTop100

BillBoardTop100 application designed to load data from csv file and using user defined function end-user should be able to view desired results of choice. This application is developed in python 3.8 and csv, matplotlib and unittest
libraries used in the application.

Architecture and structure
----------------------------
application divided in 4 different packages and main method
-model
|    - Songs.py
|
-processor
|   - DataProcessor.py
- reader
|   - CSVReader.py
- tests
|   - test_data_processor.py
|- main.py

application starts from main.py, it has the options to user select and user can select option 1-6 or can exit the system. Based on the user selection it will call the data processor to load the
specific data. DataProcessor will do a eager loading while initializing it's object in init method and call CSV reader and read the data from csv file and return the csv rows as list of Songs objects.

CSVReader
------------
csv library is used to read the data from csv file,
loaded_data = csv.reader(open(file_path(name)))

Then header will be removed from the loaded data,
next(loaded_data)

And then loaded data converted to list and finally it will be converted to list of Songs objects by calling Songs constructor
data = list(loaded_data)
songs = [Song(data[i][0], int(data[i][1]), data[i][2], data[i][3], int(data[i][4]) if len(data[i][4]) > 0 else 0, int(data[i][5]), int(data[i][6])) for i in range(len(data))]

Test case: Validating the number of lines of the test CSV file.

DataProcessor
-------------
When we initializing this class, data will be loaded from the CSVReader
def __init__(self, csv_path=None) -> None:
    super().__init__()
    if csv_path:
        self.songs = CSVReader.read(csv_path)
    else:
        self.songs = CSVReader.read("../charts.csv")

when main method calls get_top_ranked_song method, a loop will run through all the songs and check this below condition

        s.date == date and s.rank == 1, date should be same as given by main.py and rank should be 1, if not this method will throw an exception with message "song not found"

when main method calls most_top_ranked_songs_artist,
    first a dictionary will be created and a loop run through all songs and if that song rank is 1, then a record will be created in the dictionary, if same song happened t be 1 again
    value in the dictionary for that specific artist will be increased by 1. finally this dictionary will be sorted in reverse order to find the most ranked song artist

    groups = defaultdict(list)
        for s in self.songs:
            if s.rank == 1:
                if s.artist not in groups.keys():
                    groups[s.artist] = 1
                else:
                    groups[s.artist] = groups[s.artist] + 1

        c = Counter(groups) # we used counter to find the most common item from dictionary
        return c.most_common(1)[0][0]